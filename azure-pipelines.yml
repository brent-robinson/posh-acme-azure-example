name: 0.0.$(Build.BuildId)

# Linux based agent; all except the first step will also work on Windows
queue:
  name: Azure Pipelines

# The scheduled trigger will be set in the Azure DevOps portal
trigger: none

steps:

# Set the number of the build
- task: PowerShell@2
  displayName: Update Build Number
  inputs:
    targetType: 'inline'
    script: '$id = "$(Build.BuildId)"; $date = Get-Date -Format "yyyy.MMdd"; Write-Host "##vso[build.updatebuildnumber]$date.$id"'
  
# Install AzCopy v10
- task: Bash@3
  displayName: "Install AzCopy v10"
  inputs:
    targetType: 'inline'
    script: 'wget https://azcopyvnext.azureedge.net/release20190301/azcopy_linux_amd64_10.0.8.tar.gz && tar xvzf ./azcopy_linux_amd64_10.0.8.tar.gz && rm ./azcopy_linux_amd64_10.0.8.tar.gz && cp ./azcopy_linux_amd64_10.0.8/azcopy ./ && rm -rf ./azcopy_linux_amd64_10.0.8 && ./azcopy --version'

# Install the Az PowerShell modules our script will need
- task: PowerShell@2
  displayName: Install PowerShell Modules (Az.Accounts, Az.KeyVault, Az.Resources, Posh-ACME)
  inputs:
    targetType: 'inline'
    script: 'Install-Module Az.Accounts, Az.KeyVault, Az.Resources, Posh-ACME -Force'
    errorActionPreference: 'stop'
    failOnStderr: true
    pwsh: true

# Order or renew a certificate via ACME
- task: AzurePowerShell@4
  displayName: Order or Renew Certificate
  inputs:
    azureSubscription: 'ACME Certificate Automation'
    scriptType: 'FilePath'
    scriptPath: 'New-AcmeCertificate.ps1 '
    scriptArguments: '-AcmeDirectory "$(AcmeDirectory)" -AcmeContact "$(AcmeContact)" -CertificateNames "$(CertificateNames)" -StorageContainerSASToken "$(StorageContainerSASToken)"'
    errorActionPreference: 'stop'
    failOnStandardError: true
    azurePowerShellVersion: 'LatestVersion'

# Import the certificate into Azure Key Vault
- task: AzurePowerShell@4
  displayName: Import Certificate into Key Vault
  inputs:
    azureSubscription: 'ACME Certificate Automation'
    scriptType: 'FilePath'
    scriptPath: 'Import-AcmeCertificateToKeyVault.ps1 '
    scriptArguments: '-CertificateNames "$(CertificateNames)" -KeyVaultResourceId "$(KeyVaultResourceId)"'
    errorActionPreference: 'stop'
    failOnStandardError: true
    azurePowerShellVersion: 'LatestVersion'
  condition: "and(succeeded(), ne(variables['KeyVaultResourceId'], ''))"
